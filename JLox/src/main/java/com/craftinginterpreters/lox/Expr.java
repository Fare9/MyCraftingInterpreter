/*************************************
* Generated by GenerateAst program
* Do not modify this code.
* Version 0.1
* Generated the date: 2024.09.22.10.07.59
* Author: Fare9
* Expr.java contains all the expresions
* from the language, as well as their
* variables, and the visit method
*************************************/

package com.craftinginterpreters.lox;

import java.util.List;
public abstract class Expr {

  public interface Visitor<R> {
    R visitBinaryExpr(Binary expr);
    R visitConditionalExpr(Conditional expr);
    R visitGroupingExpr(Grouping expr);
    R visitLiteralExpr(Literal expr);
    R visitUnaryExpr(Unary expr);
  }


  // The base abstract accept method
  // all the classes will override it
  public abstract <R> R accept(Visitor<R> visitor);


  public static class Binary extends Expr {

    final public Expr left;
    final public Token operator;
    final public Expr right;

    Binary(Expr left, Token operator, Expr right) {
      this.left = left;
      this.operator = operator;
      this.right = right;
    }

    @Override
    public <R> R accept(Visitor<R> visitor) {
      return visitor.visitBinaryExpr(this);
    }
  }
  public static class Conditional extends Expr {

    final public Expr condition;
    final public Expr true_statement;
    final public Expr false_statement;

    Conditional(Expr condition, Expr true_statement, Expr false_statement) {
      this.condition = condition;
      this.true_statement = true_statement;
      this.false_statement = false_statement;
    }

    @Override
    public <R> R accept(Visitor<R> visitor) {
      return visitor.visitConditionalExpr(this);
    }
  }
  public static class Grouping extends Expr {

    final public Expr expression;

    Grouping(Expr expression) {
      this.expression = expression;
    }

    @Override
    public <R> R accept(Visitor<R> visitor) {
      return visitor.visitGroupingExpr(this);
    }
  }
  public static class Literal extends Expr {

    final public Object value;

    Literal(Object value) {
      this.value = value;
    }

    @Override
    public <R> R accept(Visitor<R> visitor) {
      return visitor.visitLiteralExpr(this);
    }
  }
  public static class Unary extends Expr {

    final public Token operator;
    final public Expr right;

    Unary(Token operator, Expr right) {
      this.operator = operator;
      this.right = right;
    }

    @Override
    public <R> R accept(Visitor<R> visitor) {
      return visitor.visitUnaryExpr(this);
    }
  }
}
